package com.martinfluviapablo.s5t1n2;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.examples.Example;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.media.ObjectSchema;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.media.StringSchema;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.Resource;
import org.springframework.util.FileCopyUtils;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UncheckedIOException;
import java.lang.reflect.Parameter;
import java.util.*;
import java.util.Map.Entry;

@Configuration
public class DocsConfig {

    @Bean //document bean
    public OpenAPI initDocumentation(@Value("${server.port}") String serverPort){
        return new OpenAPI() //* .openapi : default specification version 3.0
                .info(getInfo(null, null))
                // .paths -> utodetected and customized with annotations
                // servers and components optional, autogenerated + cosutomized
                .addServersItem(new Server() //if not specified it's autodetected (ok),
                                            // but with a default server's description.
                                .url("http://localhost:"+serverPort)//*
                                .description("Application's unique server."))
                .components(initialComponents());
    }

    private Info getInfo(
            @Value("${application.version}") String appVersion,
            @Value("${application.description}") String appDescription){
        return new Info()
                .title("FLORS CRUD API ")//* : App title
                .version(appVersion) //* : my API version
                .description(appDescription)
                .contact(new Contact()// none of contact fiels are requiderd
                        .name("Pablo Martín Flivà")
                        .email("paumf00@gmail.com"));
                 //no provided: license nor terms of service nor summary
    }

    private Components initialComponents(){
        return new Components()
                .schemas(initialSchemas())
                .examples(initialExamples());
    }

    private Map<String,Schema> initialSchemas(){
        return Map.ofEntries(
                getFlorPostSchema()
        );
    }

    private Map<String,Example> initialExamples(){
        return Map.ofEntries(
                getAllFlors200Example(null),
                getFlor200Example(null),
                getInvalidId400Example(null),
                getFlorNotFound404Example(null),
                getFlorDuplicated409Example(null)
        );
    }

    private Entry<String,Schema> getFlorPostSchema(){
        Schema florPostSchema = new ObjectSchema() //type object, format null
                .required(List.of("nomFlor","paisFlor"))
                .addProperty("nomFlor",new StringSchema()
                        .minLength(1)
                        .maxLength(255)
                        .example("Rosa"))
                .addProperty("paisFlor",new StringSchema()
                        .minLength(1)
                        .maxLength(255)
                        .example("Alemanya"));
        return new AbstractMap.SimpleEntry<>("FlorPostSchema", florPostSchema);
    }

    @Bean
    public Entry<String,Example> getAllFlors200Example(
            @Value("classpath:/examples/allflors.txt") Resource allFlorsExampleResource){
        Example allFlorsExample = new Example();
        Entry<String, Example> entry = new AbstractMap.SimpleEntry<String, Example>
                ("AllFlorsExample", allFlorsExample);
        allFlorsExample.setSummary("200 JSON Body Response");
        allFlorsExample.setDescription(
                "An example of successful HTTP response 200 when /flors/getAll is requested.");
        allFlorsExample.setValue(asString(allFlorsExampleResource));
        return entry;
    }

    @Bean
    public Entry<String,Example> getFlor200Example(
            @Value("classpath:/examples/oneflor.txt") Resource oneFlorExampleResource){
        Example oneFlorExample = new Example();
        Entry<String, Example> entry = new AbstractMap.SimpleEntry<String, Example>
                ("OneFlorExample", oneFlorExample);
        oneFlorExample.setSummary("2XX One Flor JSON Body Response");
        oneFlorExample.setDescription(
                "An example of successful request when POST/PUT/GET_ONE.");
        oneFlorExample.setValue(asString(oneFlorExampleResource));
        return entry;
    }

    @Bean
    public Entry<String,Example> getInvalidId400Example(
            @Value("classpath:/examples/invalididerror.txt") Resource invalidIdExampleResource){
        Example invalidIdExample = new Example();
        Entry<String, Example> entry = new AbstractMap.SimpleEntry<String, Example>
                ("InvalidIdErrorExample", invalidIdExample);
        invalidIdExample.setSummary("400 JSON Body Response");
        invalidIdExample.setDescription(
                "An example of failed request. HTTP response 400 when path has path variable /{id} " +
                        "and request done with an invalid {id} value.");
        invalidIdExample.setValue(asString(invalidIdExampleResource));
        return entry;
    }

    @Bean
    public Entry<String,Example> getFlorNotFound404Example(
            @Value("classpath:/examples/flornotfounderror.txt") Resource florNotFoundExampleResource){
        Example florNotFoundExample = new Example();
        Entry<String, Example> entry = new AbstractMap.SimpleEntry<String, Example>
                ("FlorNotFoundErrorExample", florNotFoundExample);
        florNotFoundExample.setSummary("404 JSON Body Response");
        florNotFoundExample.setDescription(
                "An example of failed request. HTTP response 404 when /flors/getOne/{id} is requested (valid id), but flor not found with such id.");
        florNotFoundExample.setValue(asString(florNotFoundExampleResource));
        return entry;
    }

    @Bean
    public Entry<String,Example> getFlorDuplicated409Example(
            @Value("classpath:/examples/florduplicatederror.txt") Resource florDuplicatedExampleResource){
        Example florDuplicatedExample = new Example();
        Entry<String, Example> entry = new AbstractMap.SimpleEntry<String, Example>
                ("FlorDuplicatedErrorExample", florDuplicatedExample);
        florDuplicatedExample.setSummary("409 JSON Body Response");
        florDuplicatedExample.setDescription(
                "An example of failed request. HTTP response 409 when POST/PUT flor implies duplicate data " +
                        "(same name and country in other registry)");
        florDuplicatedExample.setValue(asString(florDuplicatedExampleResource));
        return entry;
    }

    private String asString(Resource resource) {
        try (Reader reader = new InputStreamReader(resource.getInputStream())) {
            return FileCopyUtils.copyToString(reader);
        }
        catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }
}
