
Recursos a tenir a ma:
Open api especificacions + getting started + guia interactiva
Swagger getting started / guia + core getting started (en apartat annotacions)
SpringDocs page

Extres a mirar:
https://dzone.com/articles/openapi-3-documentation-with-spring-boot (+ part 2 i 3)
https://www.baeldung.com/spring-rest-openapi-documentation + extres amb tag swagger

GUIA
1) Importar dependencia springdocs en maven
2) OPCIONAL: indicar en properties els paths per accedir a la documentació

    http://localhost:9001/v3/api-docs/  (default, en json, afegir .yaml si vui altre format)
    springdoc.api-docs.path=/api-docs

    http://localhost:9001/swagger-ui.html (default)
    springdoc.swagger-ui.path=/swagger-ui

3) OPCIONAL: agefir dependencies extra de springdocs i/o custom configuracions
4) Configurar la base de la documentació (descripció, servidor, info, contact...) -> veure DocsConfig
5) Propietat paths s'autodetecta
    mapa <Strign, PathItem> -> tots els possibles paths als que es pot fer peticions a la API
6) Propietat PathItem s'autodetecta -> tots els possibles http mèthods que accepta aquest path
    Cadascun d'ells és un Operation, que "correspon" a un mètode d'un controlador
7) Cada Operation autodetectada (sense jo indicar res) té, per defecte (autogenerat):
    id: nom del mètode
    7.1) un tag en tags[]: "nom del controlador de manera llegible"
        Suposició: per a poder agrupar les Operations de la API, swagger-ui les agrupa segons
        el tag que tenen (per defecte el "nom del controlador)".
        Idea: per a poder agrupar-les i mostrar-les jo de manera personalitzada, posar un
        @Tag a nivell de classe (en el controlador)
            -> es genera un camp tag, en tags (en el top level del document)
            -> tots els mètodes d'aquest controlador tenen aquest tag (ui es mostren agrupats sota
            aquest tag.
        Obs: posar A MÉS un @Tag a nivell de mètode -> amplia els tags[] del operation ->
        aquesta operació es mostrarà en TOTES les agrupacions (NO sobreescriu).
    7.2) Mapa Responses autogenerat (ApiResponses.class extends Map)
        -> Ampliat en punt 8.2
        Per defecte totes les operacions amb una sola resposta (ApiResonse):
        200: { description: ok; content: xxxx}
        IMPORTANT: Per defecte s'afegeixen TOTES les respostes d'un @ControllerAdvice
        que afecti al controlador!!!
    7.3) List de Parameters[] autogenerat (si ho detecta en el mètode)
        -> Ampliat en punt 8.3
        Pot detectar-ho en (i especificat en el camp in): header/path/query/cookie
        ex: @PathVariable -> in: path; @RequestParam -> in: query;
    7.4) El RequestBody (si ho detecta en el mètode)

-> Ampliació de Operation
8)Operation. Per a cada operació personaliztar-la, per a que generi la documentació que jo vui mostrar.
8.1) Tags: Annotació a nivell de controlador. I, si interessa, tmb a nivell de mètode (si vui
mostrar la operació també en algun algtre grup apart de la d'aquest controlador).
8.2) Responses:
    a) Si NO vui que totes les possibles respostes de @ControllerAdvice es mostrin en totes les
    operacions puc fer:
        @Hidden a nivell de @ControllerAdvice (totes ignorades al documentar) o només a nivell de mètode
        OR En properties -> springdoc.override-with-generic-response=false (ignorar respostes dels @ControllerAdvice)
        OR "partir" el controlador i/o el @ControllerAdvice, per a especificar que els mètodes del advice X
        només s'apliquen als mètodes del controlador Y
    b) Per evitar duplicació de codi i fer més "llegible" / no embrutar el controlador ->
    puc fer us d'annotacions compostes personalitzades
    c) Content:
        Si no indico el continugt: el media type és */*, el schema s'autodetecta, no genera exemple
        c.1) Media type:
            Opcio a: puc fer que el detecti, especificant a nivell de controlador o mètode
            en el @RequestMapping el atribut produces.
            Opcio b: puc posar @Produces (als mateixos nivells que cas anterior). Afecta només
            a la documentació.
            Opcio c: puc indicar-ho en content = @Content(produces = xxx). En aquest cas, si es
            deixes així, la documentació no generaria cap schema.
        c.2) Examples:
            Si el json d'exemple és petit el puc escriure directament en l'anotació.
            Si és molt engorros és millor:
                Escriure el json en un .txt en resources
                En una classe config crear un bean Entry<String,Example> (Entry és subclasse de Map)
                i crear el objecte Example i posar-lo en aquesta Entry
                En una classe config crear un bean OpenApiCustomiser i afegir tots els exemples en
                components.
                -> Veure DocsConfig.class
                En l'anotació del Content indicar @Example(name=, ref= )
                    Obs: el name (tot hi que no és necessar) és millor que sigui el mateix a
                    com l'he anomenat al guardar l'objecte Example en Components.
                Font:
                https://stackoverflow.com/questions/63465763/springdoc-openapi-how-to-add-example-of-post-request
                https://github.com/springdoc/springdoc-openapi/blob/master/springdoc-openapi-javadoc/src/test/java/test/org/springdoc/api/app90/HelloController.java
        c.3) Schemas:
            En responses, si és molt senzill, millor no posar-lo i és preferible posar un example.
            OBS: Especificar la classe que implementa l'esquema, quan aquesta és una concreta d'una
            parametritzada (genèric) NO és pot indicar directmanet mitjançant
            @Schema(implementation = ClasseParametritzada<ClasseConcreta>.class
            -> Possible solució, crear una classe (a poder ser interna o poc visible),
            que heredi d'aquesta + implementation = ClasseFilla.class
8.3) Parametres
    PATH VARIABLE:
        Per defecte trova el tipus + si es requerit o no.
        Si hi ha alguna constraint només l'autodetecta si l'anotació està en el argument!!!
        Ex:(@PathVariable @Min(1) ) ok; xo si la constraint és una anotació composta feta per mi
        NO la detecta!!
        -> Si no m'agrada com ho autodetecta: millor especificar tot el paràmetre al complet,

9) Components
    A) Examples. OK -> veure DocsCongig.class
    B) Schemas. NO he trovat una manera de definir un schema "a priori" en components,
    per a poder-lo reutilitzar des de les anotacions.
        "Sembla que tot lo que es defineixi previament es sobreescriu al escanejar anotacions"???

TODO:
ControllerAdvice
Indicar validacions
https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject
